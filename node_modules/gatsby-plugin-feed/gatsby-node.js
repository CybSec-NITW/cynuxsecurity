"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _rss = _interopRequireDefault(require("rss"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _internals = require("./internals");

var _pluginOptions = _interopRequireDefault(require("./plugin-options"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var publicPath = "./public";
exports.pluginOptionsSchema = _pluginOptions.default; // TODO: remove in the next major release
// A default function to transform query data into feed entries.

var serialize = function serialize(_ref) {
  var _ref$query = _ref.query,
      site = _ref$query.site,
      allMarkdownRemark = _ref$query.allMarkdownRemark;
  return allMarkdownRemark.edges.map(function (edge) {
    return (0, _extends2.default)({}, edge.node.frontmatter, {
      description: edge.node.excerpt,
      url: site.siteMetadata.siteUrl + edge.node.fields.slug,
      guid: site.siteMetadata.siteUrl + edge.node.fields.slug,
      custom_elements: [{
        "content:encoded": edge.node.html
      }]
    });
  });
};

exports.onPostBuild = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref2, pluginOptions) {
    var graphql, options, baseQuery, _iterator, _step, _ref5, feed, _options$feed, setup, locals, serializer, rssFeed, outputPath, outputDir;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            graphql = _ref2.graphql;

            /*
             * Run the site settings query to gather context, then
             * then run the corresponding feed for each query.
             */
            options = (0, _extends2.default)({}, _internals.defaultOptions, pluginOptions);
            _context.next = 4;
            return (0, _internals.runQuery)(graphql, options.query);

          case 4:
            baseQuery = _context.sent;
            _iterator = _createForOfIteratorHelperLoose(options.feeds);

          case 6:
            if ((_step = _iterator()).done) {
              _context.next = 29;
              break;
            }

            _ref5 = _step.value;
            feed = (0, _extends2.default)({}, _ref5);

            if (!feed.query) {
              _context.next = 13;
              break;
            }

            _context.next = 12;
            return (0, _internals.runQuery)(graphql, feed.query).then(function (result) {
              return (0, _lodash.default)({}, baseQuery, result);
            });

          case 12:
            feed.query = _context.sent;

          case 13:
            _options$feed = (0, _extends2.default)({}, options, feed), setup = _options$feed.setup, locals = (0, _objectWithoutPropertiesLoose2.default)(_options$feed, ["setup"]);
            serializer = feed.serialize && typeof feed.serialize === "function" ? feed.serialize : serialize;
            _context.next = 17;
            return serializer(locals);

          case 17:
            rssFeed = _context.sent.reduce(function (merged, item) {
              merged.item(item);
              return merged;
            }, new _rss.default(setup(locals)));
            outputPath = _path.default.join(publicPath, feed.output);
            outputDir = _path.default.dirname(outputPath);
            _context.next = 22;
            return _fsExtra.default.exists(outputDir);

          case 22:
            if (_context.sent) {
              _context.next = 25;
              break;
            }

            _context.next = 25;
            return _fsExtra.default.mkdirp(outputDir);

          case 25:
            _context.next = 27;
            return _fsExtra.default.writeFile(outputPath, rssFeed.xml());

          case 27:
            _context.next = 6;
            break;

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}();