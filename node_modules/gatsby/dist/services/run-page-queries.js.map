{"version":3,"sources":["../../src/services/run-page-queries.ts"],"names":["ONE_MINUTE","runPageQueries","parentSpan","queryIds","store","program","graphqlRunner","pageQueryIds","state","getState","pageQueryIdsCount","filter","id","pages","has","length","activity","reporter","createProgress","start","cancelNotice","process","env","gatsby_executing_command","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","stripIndent","graphqlTracing","done"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAIA;;AAEA,MAAMA,UAAU,GAAG,IAAI,EAAJ,GAAS,IAA5B;;AAEO,eAAeC,cAAf,CAA8B;AACnCC,EAAAA,UADmC;AAEnCC,EAAAA,QAFmC;AAGnCC,EAAAA,KAHmC;AAInCC,EAAAA,OAJmC;AAKnCC,EAAAA;AALmC,CAA9B,EAM0C;AAC/C,gCAAYF,KAAZ;;AAEA,MAAI,CAACD,QAAL,EAAe;AACb;AACD;;AACD,QAAM;AAAEI,IAAAA;AAAF,MAAmBJ,QAAzB;AACA,QAAMK,KAAK,GAAGJ,KAAK,CAACK,QAAN,EAAd;AACA,QAAMC,iBAAiB,GAAGH,YAAY,CAACI,MAAb,CAAoBC,EAAE,IAAIJ,KAAK,CAACK,KAAN,CAAYC,GAAZ,CAAgBF,EAAhB,CAA1B,EACvBG,MADH;;AAGA,MAAI,CAACL,iBAAL,EAAwB;AACtB;AACD;;AAED,QAAMM,QAAQ,GAAGC,kBAASC,cAAT,CACd,kBADc,EAEfR,iBAFe,EAGf,CAHe,EAIf;AACEE,IAAAA,EAAE,EAAG,oBADP;AAEEV,IAAAA;AAFF,GAJe,CAAjB;;AAUAc,EAAAA,QAAQ,CAACG,KAAT;AAEA,MAAIC,YAAJ;;AACA,MACEC,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,SAA1C,IACA,CAACF,OAAO,CAACC,GAAR,CAAYE,mCADb,IAEA,CAAC,4BAHH,EAIE;AACAJ,IAAAA,YAAY,GAAG,4DACZ,eADY,EAEbH,kBAASQ,WAAT,CAAsB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAVM,CAFa,EAabzB,UAba,CAAf;AAeD;;AAED,QAAM,+BAAmBO,YAAnB,EAAiC;AACrCC,IAAAA,KADqC;AAErCQ,IAAAA,QAFqC;AAGrCV,IAAAA,aAHqC;AAIrCoB,IAAAA,cAAc,EAAErB,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEqB;AAJY,GAAjC,CAAN;;AAOA,MAAIN,YAAJ,EAAkB;AAChBA,IAAAA,YAAY;AACb;;AAEDJ,EAAAA,QAAQ,CAACW,IAAT;AACD","sourcesContent":["import { processPageQueries } from \"../query\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport {\n  showExperimentNoticeAfterTimeout,\n  CancelExperimentNoticeCallbackOrUndefined,\n} from \"../utils/show-experiment-notice\"\nimport { isCI } from \"gatsby-core-utils\"\n\nconst ONE_MINUTE = 1 * 60 * 1000\n\nexport async function runPageQueries({\n  parentSpan,\n  queryIds,\n  store,\n  program,\n  graphqlRunner,\n}: Partial<IQueryRunningContext>): Promise<void> {\n  assertStore(store)\n\n  if (!queryIds) {\n    return\n  }\n  const { pageQueryIds } = queryIds\n  const state = store.getState()\n  const pageQueryIdsCount = pageQueryIds.filter(id => state.pages.has(id))\n    .length\n\n  if (!pageQueryIdsCount) {\n    return\n  }\n\n  const activity = reporter.createProgress(\n    `run page queries`,\n    pageQueryIdsCount,\n    0,\n    {\n      id: `page-query-running`,\n      parentSpan,\n    }\n  )\n\n  activity.start()\n\n  let cancelNotice: CancelExperimentNoticeCallbackOrUndefined\n  if (\n    process.env.gatsby_executing_command === `develop` &&\n    !process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND &&\n    !isCI()\n  ) {\n    cancelNotice = showExperimentNoticeAfterTimeout(\n      `queryOnDemand`,\n      reporter.stripIndent(`\n        Your local development experience is about to get better, faster, and stronger!\n\n        Your friendly Gatsby maintainers detected your site takes longer than ideal to run page queries. We're working right now to improve this.\n\n        If you're interested in trialing out one of these future improvements *today* which should make your local development experience faster, go ahead and run your site with QUERY_ON_DEMAND enabled.\n\n        You can enable it by adding \"flags: { QUERY_ON_DEMAND: true }\" to your gatsby-config.js\n\n        Please do let us know how it goes (good, bad, or otherwise) and learn more about it at https://gatsby.dev/query-on-demand-feedback\n      `),\n      ONE_MINUTE\n    )\n  }\n\n  await processPageQueries(pageQueryIds, {\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing: program?.graphqlTracing,\n  })\n\n  if (cancelNotice) {\n    cancelNotice()\n  }\n\n  activity.done()\n}\n"],"file":"run-page-queries.js"}