{"version":3,"sources":["../../src/utils/handle-flags.ts"],"names":["terminalLink","text","url","process","env","NODE_ENV","handleFlags","flags","configFlags","executingCommand","gatsby_executing_command","availableFlags","Map","forEach","flag","set","name","unknownConfigFlags","flagName","has","flagWithMinDistance","minDistance","availableFlag","distanceToFlag","push","didYouMean","unknownFlagMessage","length","enabledConfigFlags","Object","keys","filter","map","get","noCi","command","addIncluded","includedFlags","includedName","incExp","find","e","_","uniq","generateFlagLine","message","experimental","chalk","white","bgRed","bold","umbrellaIssue","description","otherFlagsCount","enabledFlagsSet","Set","f","add"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { isCI } from \"gatsby-core-utils\"\nimport realTerminalLink from \"terminal-link\"\nimport { IFlag } from \"./flags\"\nimport chalk from \"chalk\"\nimport { commaListsAnd } from \"common-tags\"\nimport { distance } from \"fastest-levenshtein\"\n\nconst terminalLink = (text, url): string => {\n  if (process.env.NODE_ENV === `test`) {\n    return `${text} (${url})`\n  } else {\n    return realTerminalLink(text, url)\n  }\n}\n\nconst handleFlags = (\n  flags: Array<IFlag>,\n  configFlags: Record<string, boolean>,\n  executingCommand = process.env.gatsby_executing_command\n): {\n  enabledConfigFlags: Array<IFlag>\n  unknownFlagMessage: string\n  message: string\n} => {\n  // Prepare config flags.\n  // Filter out any flags that are set to false.\n  const availableFlags = new Map()\n  flags.forEach(flag => availableFlags.set(flag.name, flag))\n\n  // Find unknown flags someone has in their config to warn them about.\n  const unknownConfigFlags: Array<any> = []\n  for (const flagName in configFlags) {\n    if (availableFlags.has(flagName)) {\n      continue\n    }\n    let flagWithMinDistance\n    let minDistance\n    for (const availableFlag of flags) {\n      if (availableFlag.name !== flagName) {\n        const distanceToFlag = distance(flagName, availableFlag.name)\n        if (!flagWithMinDistance || distanceToFlag < minDistance) {\n          flagWithMinDistance = availableFlag.name\n          minDistance = distanceToFlag\n        }\n      }\n    }\n\n    if (flagName) {\n      unknownConfigFlags.push({\n        flag: flagName,\n        didYouMean:\n          flagWithMinDistance && minDistance < 4 ? flagWithMinDistance : ``,\n      })\n    }\n  }\n\n  let unknownFlagMessage = ``\n  if (unknownConfigFlags.length > 0) {\n    unknownFlagMessage = commaListsAnd`The following flag(s) found in your gatsby-config.js are not known:`\n    unknownConfigFlags.forEach(\n      flag =>\n        (unknownFlagMessage += `\\n- ${flag?.flag}${\n          flag?.didYouMean ? ` (did you mean: ${flag?.didYouMean})` : ``\n        }`)\n    )\n  }\n\n  let enabledConfigFlags = Object.keys(configFlags)\n    .filter(name => configFlags[name] && availableFlags.has(name))\n    .map(flagName => availableFlags.get(flagName))\n\n  // If we're in CI, filter out any flags that don't want to be enabled in CI\n  if (isCI()) {\n    enabledConfigFlags = enabledConfigFlags.filter(flag => flag.noCi !== true)\n  }\n\n  // Filter out any flags that aren't for this environment.\n  enabledConfigFlags = enabledConfigFlags.filter(\n    flag => flag.command === `all` || flag.command === executingCommand\n  )\n\n  const addIncluded = (flag): void => {\n    if (flag.includedFlags) {\n      flag.includedFlags.forEach(includedName => {\n        const incExp = flags.find(e => e.name == includedName)\n        if (incExp) {\n          enabledConfigFlags.push(incExp)\n          addIncluded(incExp)\n        }\n      })\n    }\n  }\n  // Add to enabledConfigFlags any includedFlags\n  enabledConfigFlags.forEach(flag => {\n    addIncluded(flag)\n  })\n\n  enabledConfigFlags = _.uniq(enabledConfigFlags)\n\n  // TODO remove flags that longer exist.\n  //  w/ message of thanks\n\n  const generateFlagLine = (flag): string => {\n    let message = ``\n    message += `\\n- ${flag.name}`\n    if (flag.experimental) {\n      message += ` · ${chalk.white.bgRed.bold(`EXPERIMENTAL`)}`\n    }\n    if (flag.umbrellaIssue) {\n      message += ` · (${terminalLink(`Umbrella Issue`, flag.umbrellaIssue)})`\n    }\n    message += ` · ${flag.description}`\n\n    return message\n  }\n\n  let message = ``\n  //  Create message about what flags are active.\n  if (enabledConfigFlags.length > 0) {\n    message = `The following flags are active:`\n    enabledConfigFlags.forEach(flag => {\n      message += generateFlagLine(flag)\n    })\n\n    const otherFlagsCount = flags.length - enabledConfigFlags.length\n    if (otherFlagsCount > 0) {\n      message += `\\n\\nThere ${\n        otherFlagsCount === 1\n          ? `is one other flag`\n          : `are ${otherFlagsCount} other flags`\n      } available that you might be interested in:`\n\n      const enabledFlagsSet = new Set()\n      enabledConfigFlags.forEach(f => enabledFlagsSet.add(f.name))\n      flags.forEach(flag => {\n        if (!enabledFlagsSet.has(flag.name)) {\n          message += generateFlagLine(flag)\n        }\n      })\n    }\n\n    message += `\\n`\n  }\n\n  return {\n    enabledConfigFlags,\n    message,\n    unknownFlagMessage,\n  }\n}\n\nexport default handleFlags\n"],"file":"handle-flags.js"}